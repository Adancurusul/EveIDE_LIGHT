// File: id_invert.v
// Generated by MyHDL 0.11
// Date: Sat Jun 27 20:12:41 2020


`timescale 1ns/10ps

module id_invert (

);



wire [15:0] ins;
wire [15:0] branch_offset;
wire [7:0] imm;
reg [7:0] register_write = 0;
reg [3:0] alu_signal = 0;
wire [2:0] selector;
wire [2:0] ds1_rx;
wire [2:0] ds2_rx;
reg rd_r1_mux = 0;
reg rd_r0_mux = 0;
reg cr_write = 0;
reg mem_read = 0;
reg mem_write = 0;
reg jmp = 0;
reg ret = 0;
reg apc = 0;
wire rd_mux0;
wire rd_mux1;
reg bra = 0;
wire [3:0] id0_funct4_0;
wire [3:0] id0_funct4_1;
wire [3:0] id0_funct4_2;
wire [3:0] id0_funct4_3;
wire [3:0] id0_funct4_4;
wire [3:0] id0_funct4_5;
wire [3:0] id0_funct4_8;
wire [3:0] id0_funct4_9;
wire [2:0] id0_ins20;
wire [2:0] id0_ins96;
wire [1:0] id0_opcode_ls;

assign ins = 16'd0;
assign id0_funct4_0 = 4'd0;
assign id0_funct4_1 = 4'd1;
assign id0_funct4_2 = 4'd2;
assign id0_funct4_3 = 4'd3;
assign id0_funct4_4 = 4'd4;
assign id0_funct4_5 = 4'd5;
assign id0_funct4_8 = 4'd8;
assign id0_funct4_9 = 4'd9;
assign id0_opcode_ls = 2'd3;



assign id0_ins20 = ins[2-1:0];
assign id0_ins96 = ins[9-1:6];


always @(id0_funct4_9, id0_funct4_4, id0_funct4_8, id0_funct4_2, id0_funct4_1, id0_funct4_5, id0_funct4_3, id0_funct4_0, id0_ins20, id0_ins96, ins) begin: ID_INVERT_ID0_ID_LOGIC
    if ((id0_ins20 == 2'b00)) begin
        alu_signal = ins[6-1:2];
        register_write = ins[9-1:6];
    end
    else begin
        alu_signal = 0;
        register_write = 0;
    end
    if ((id0_ins20 == 2'b01)) begin
        bra = (1 != 0);
    end
    else begin
        bra = (0 != 0);
    end
    if ((id0_ins20 == 2'b10)) begin
        register_write[0] = (ins[6-1:2] == id0_funct4_4);
        register_write[1] = (ins[6-1:2] == id0_funct4_4);
        rd_r0_mux = (ins[6-1:2] == id0_funct4_4);
        rd_r1_mux = (ins[6-1:2] == id0_funct4_4);
        cr_write = (ins[6-1:2] == id0_funct4_3);
        jmp = ((ins[6-1:2] == id0_funct4_0) || (ins[6-1:2] == id0_funct4_2));
        apc = ((ins[6-1:2] == id0_funct4_0) || (ins[6-1:2] == id0_funct4_1));
        ret = (ins[6-1:2] == id0_funct4_5);
    end
    else begin
        register_write[0] = (0 != 0);
        register_write[1] = (0 != 0);
        rd_r0_mux = (0 != 0);
        rd_r1_mux = (0 != 0);
        cr_write = (0 != 0);
        jmp = (0 != 0);
        apc = (0 != 0);
        ret = (0 != 0);
    end
    if ((id0_ins20 == 2'b11)) begin
        mem_read = (ins[6-1:2] == id0_funct4_8);
        mem_write = (ins[6-1:2] == id0_funct4_9);
        if (((ins[9-1:6] == id0_funct4_9) | (ins[6-1:2] == id0_funct4_0))) begin
            case (id0_ins96)
                3'b000: begin
                    register_write[0] = 1;
                end
                3'b001: begin
                    register_write[1] = 1;
                end
                3'b010: begin
                    register_write[2] = 1;
                end
                3'b011: begin
                    register_write[3] = 1;
                end
                3'b100: begin
                    register_write[4] = 1;
                end
                3'b101: begin
                    register_write[5] = 1;
                end
                3'b110: begin
                    register_write[6] = 1;
                end
                3'b111: begin
                    register_write[7] = 1;
                end
                default: begin
                    register_write = 0;
                end
            endcase
        end
        else begin
            register_write = 0;
        end
    end
    else begin
        mem_read = (0 != 0);
        mem_write = (0 != 0);
        register_write = 0;
    end
end



assign rd_mux0 = (ins[6-1:2] == id0_funct4_0);
assign rd_mux1 = (ins[2-1:0] == id0_opcode_ls);



assign ds2_rx = ins[12-1:9];
assign ds1_rx = ins[12-1:9];



assign selector = ins[12-1:9];



assign imm[7] = 0;
assign imm[7-1:0] = ins[16-1:9];
assign branch_offset[15] = ins[15];
assign branch_offset[14] = ins[15];
assign branch_offset[13] = ins[15];
assign branch_offset[12] = ins[15];
assign branch_offset[11] = ins[15];
assign branch_offset[10] = ins[15];
assign branch_offset[9] = ins[15];
assign branch_offset[8] = ins[15];
assign branch_offset[8-1:4] = ins[15-1:12];
assign branch_offset[4-1:1] = ins[9-1:6];
assign branch_offset[0] = 0;

endmodule
