// File: top.v
// Generated by MyHDL 0.11
// Date: Wed Jul 29 16:17:54 2020


`timescale 1ns/10ps

module top (
    clk,
    rst,
    write,
    read,
    rdy,
    pc,
    ins,
    addr,
    wdata,
    rdata,
    int0,
    int1,
    int2,
    int3
);
// clk = Signal(bool(0))
// rst = ResetSignal(1, active=1, isasync=False)
// write = Signal(bool(0))
// read = Signal(bool(0))
// rdy = Signal(bool(0))
// pc = Signal(intbv(0)[16:])
// ins = Signal(intbv(0)[16:])
// addr = Signal(intbv(0)[16:])
// wdata = Signal(intbv(0)[8:])
// rdata = Signal(intbv(0)[8:])
// int0 = Signal(bool(0))
// int1 = Signal(bool(0))
// int2 = Signal(bool(0))
// int3 = Signal(bool(0))

input clk;
input rst;
output write;
wire write;
output read;
wire read;
input rdy;
output [15:0] pc;
reg [15:0] pc;
input [15:0] ins;
output [15:0] addr;
reg [15:0] addr;
output [7:0] wdata;
reg [7:0] wdata;
input [7:0] rdata;
input int0;
input int1;
input int2;
input int3;

wire [15:0] r6_r7_data;
wire [15:0] branch_offset;
reg [7:0] ds1_data = 0;
reg [7:0] ds2_data = 0;
reg [7:0] register_write = 0;
reg [3:0] alu_signal = 0;
wire [2:0] selector;
wire [2:0] ds1_rx;
wire [2:0] ds2_rx;
reg rd_r1_mux = 0;
reg rd_r0_mux = 0;
reg cr_write = 0;
reg mem_read = 0;
reg mem_write = 0;
reg jmp = 0;
reg ret = 0;
reg apc = 0;
reg bra = 0;
reg [15:0] cr_data = 0;
wire mem_ok;
wire branch;
reg main_state = 0;
reg [7:0] alu_out = 0;
wire [7:0] imm;
wire [7:0] lsu_out;
reg [7:0] rd_data = 0;
wire rd_mux0;
wire rd_mux1;
wire [3:0] id0_funct4_0;
wire [3:0] id0_funct4_1;
wire [3:0] id0_funct4_2;
wire [3:0] id0_funct4_3;
wire [3:0] id0_funct4_4;
wire [3:0] id0_funct4_5;
wire [3:0] id0_funct4_8;
wire [3:0] id0_funct4_9;
wire [2:0] id0_ins20;
wire [2:0] id0_ins96;
wire [1:0] id0_opcode_ls;
reg [15:0] cr0_CPC = 0;
reg [15:0] cr0_EPC = 0;
reg cr0_GIE = 0;
reg cr0_IE0 = 0;
reg cr0_IE1 = 0;
reg cr0_IE2 = 0;
reg cr0_IE3 = 0;
reg [15:0] cr0_PC = 0;
reg cr0_PGIE = 0;
reg [15:0] cr0_TVEC0 = 0;
reg [15:0] cr0_TVEC1 = 0;
reg [15:0] cr0_TVEC2 = 0;
reg [15:0] cr0_TVEC3 = 0;
wire cr0_int0_acc;
wire cr0_int1_acc;
wire cr0_int2_acc;
wire cr0_int3_acc;
wire cr0_int_acc;
reg [15:0] cr0_tvec = 0;
wire [7:0] alu0_shift_left;
wire [7:0] alu0_shift_num;
reg [7:0] alu0_shift_right_signed = 0;
wire [7:0] alu0_shift_right_signed_temp;
reg [7:0] alu0_shift_right_unsigned = 0;
reg [7:0] gpr0_r0 = 0;
reg [7:0] gpr0_r1 = 0;
reg [7:0] gpr0_r2 = 0;
reg [7:0] gpr0_r3 = 0;
reg [7:0] gpr0_r4 = 0;
reg [7:0] gpr0_r5 = 0;
reg [7:0] gpr0_r6 = 0;
reg [7:0] gpr0_r7 = 0;

assign id0_funct4_0 = 4'd0;
assign id0_funct4_1 = 4'd1;
assign id0_funct4_2 = 4'd2;
assign id0_funct4_3 = 4'd3;
assign id0_funct4_4 = 4'd4;
assign id0_funct4_5 = 4'd5;
assign id0_funct4_8 = 4'd8;
assign id0_funct4_9 = 4'd9;
assign id0_opcode_ls = 2'd3;


always @(rd_mux1, alu_out, imm, lsu_out, rd_mux0) begin: TOP_RD_DATA_LOGIC
    if (rd_mux1) begin
        if (rd_mux0) begin
            rd_data = imm;
        end
        else begin
            rd_data = lsu_out;
        end
    end
    else begin
        rd_data = alu_out;
    end
end



assign id0_ins20 = ins[2-1:0];
assign id0_ins96 = ins[9-1:6];


always @(id0_funct4_9, id0_funct4_4, ins, id0_funct4_3, id0_funct4_1, id0_funct4_0, id0_funct4_2, id0_funct4_8, id0_ins20, id0_funct4_5, id0_ins96) begin: TOP_ID0_ID_LOGIC
    if ((id0_ins20 == 2'b00)) begin
        alu_signal = ins[6-1:2];
        register_write = ins[9-1:6];
    end
    else begin
        alu_signal = 0;
        register_write = 0;
    end
    if ((id0_ins20 == 2'b01)) begin
        bra = (1 != 0);
    end
    else begin
        bra = (0 != 0);
    end
    if ((id0_ins20 == 2'b10)) begin
        register_write[0] = (ins[6-1:2] == id0_funct4_4);
        register_write[1] = (ins[6-1:2] == id0_funct4_4);
        rd_r0_mux = (ins[6-1:2] == id0_funct4_4);
        rd_r1_mux = (ins[6-1:2] == id0_funct4_4);
        cr_write = (ins[6-1:2] == id0_funct4_3);
        jmp = ((ins[6-1:2] == id0_funct4_0) || (ins[6-1:2] == id0_funct4_2));
        apc = ((ins[6-1:2] == id0_funct4_0) || (ins[6-1:2] == id0_funct4_1));
        ret = (ins[6-1:2] == id0_funct4_5);
    end
    else begin
        register_write[0] = (0 != 0);
        register_write[1] = (0 != 0);
        rd_r0_mux = (0 != 0);
        rd_r1_mux = (0 != 0);
        cr_write = (0 != 0);
        jmp = (0 != 0);
        apc = (0 != 0);
        ret = (0 != 0);
    end
    if ((id0_ins20 == 2'b11)) begin
        mem_read = (ins[6-1:2] == id0_funct4_8);
        mem_write = (ins[6-1:2] == id0_funct4_9);
        if (((ins[9-1:6] == id0_funct4_9) | (ins[6-1:2] == id0_funct4_0))) begin
            case (id0_ins96)
                3'b000: begin
                    register_write[0] = 1;
                end
                3'b001: begin
                    register_write[1] = 1;
                end
                3'b010: begin
                    register_write[2] = 1;
                end
                3'b011: begin
                    register_write[3] = 1;
                end
                3'b100: begin
                    register_write[4] = 1;
                end
                3'b101: begin
                    register_write[5] = 1;
                end
                3'b110: begin
                    register_write[6] = 1;
                end
                3'b111: begin
                    register_write[7] = 1;
                end
                default: begin
                    register_write = 0;
                end
            endcase
        end
        else begin
            register_write = 0;
        end
    end
    else begin
        mem_read = (0 != 0);
        mem_write = (0 != 0);
        register_write = 0;
    end
end



assign rd_mux0 = (ins[6-1:2] == id0_funct4_0);
assign rd_mux1 = (ins[2-1:0] == id0_opcode_ls);



assign ds2_rx = ins[12-1:9];
assign ds1_rx = ins[12-1:9];



assign selector = ins[12-1:9];



assign imm[7] = 0;
assign imm[7-1:0] = ins[16-1:9];
assign branch_offset[15] = ins[15];
assign branch_offset[14] = ins[15];
assign branch_offset[13] = ins[15];
assign branch_offset[12] = ins[15];
assign branch_offset[11] = ins[15];
assign branch_offset[10] = ins[15];
assign branch_offset[9] = ins[15];
assign branch_offset[8] = ins[15];
assign branch_offset[8-1:4] = ins[15-1:12];
assign branch_offset[4-1:1] = ins[9-1:6];
assign branch_offset[0] = 0;


always @(cr0_TVEC1, cr0_int2_acc, cr0_TVEC2, cr0_TVEC3, cr0_TVEC0, cr0_int0_acc, cr0_int1_acc) begin: TOP_CR0_COMB_LOGIC
    if (cr0_int0_acc) begin
        cr0_tvec = cr0_TVEC0;
    end
    else if (cr0_int1_acc) begin
        cr0_tvec = cr0_TVEC1;
    end
    else if (cr0_int2_acc) begin
        cr0_tvec = cr0_TVEC2;
    end
    else begin
        cr0_tvec = cr0_TVEC3;
    end
end


always @(r6_r7_data, ret, branch_offset, cr0_EPC, branch, cr0_PC, jmp) begin: TOP_CR0_COMB_LOGIC2
    if (ret) begin
        pc = cr0_EPC;
    end
    else if (branch) begin
        pc = (cr0_PC + branch_offset);
    end
    else if (jmp) begin
        pc = r6_r7_data;
    end
    else begin
        pc = cr0_PC;
    end
end


always @(cr0_TVEC1, cr0_IE1, cr0_GIE, cr0_PGIE, cr0_TVEC2, cr0_EPC, cr0_IE0, cr0_TVEC0, cr0_TVEC3, cr0_IE3, cr0_IE2, selector, cr0_CPC) begin: TOP_CR0_COMB_LOGIC3
    case (selector)
        3'b000: begin
            cr_data[16-1:2] = 14'h0;
            cr_data[1] = cr0_PGIE;
            cr_data[0] = cr0_GIE;
        end
        3'b001: begin
            cr_data[16-1:4] = 12'h0;
            cr_data[3] = cr0_IE3;
            cr_data[2] = cr0_IE2;
            cr_data[1] = cr0_IE1;
            cr_data[0] = cr0_IE0;
        end
        3'b010: begin
            cr_data = cr0_EPC;
        end
        3'b011: begin
            cr_data = cr0_CPC;
        end
        3'b100: begin
            cr_data = cr0_TVEC0;
        end
        3'b101: begin
            cr_data = cr0_TVEC1;
        end
        3'b110: begin
            cr_data = cr0_TVEC2;
        end
        3'b111: begin
            cr_data = cr0_TVEC3;
        end
        default: begin
            cr_data = 0;
        end
    endcase
end


always @(posedge clk) begin: TOP_CR0_CR_LOGIC
    if (rst == 1) begin
        main_state <= 0;
    end
    else begin
        if ((!main_state)) begin
            if ((mem_read | mem_write)) begin
                main_state <= (1 != 0);
            end
            else begin
                main_state <= (0 != 0);
            end
        end
        else if (main_state) begin
            if (mem_ok) begin
                main_state <= (0 != 0);
            end
            else begin
                main_state <= (1 != 0);
            end
        end
    end
end


always @(posedge clk) begin: TOP_CR0_CR_LOGIC2
    if (rst == 1) begin
        cr0_GIE <= 0;
        cr0_PGIE <= 0;
    end
    else begin
        if (cr0_int_acc) begin
            cr0_GIE <= 0;
        end
        else if (ret) begin
            cr0_GIE <= cr0_PGIE;
        end
        else if (((selector == 3'b000) && cr_write)) begin
            cr0_GIE <= r6_r7_data[0];
        end
        if (cr0_int_acc) begin
            cr0_PGIE <= cr0_GIE;
        end
        else if (((selector == 3'b000) && cr_write)) begin
            cr0_PGIE <= r6_r7_data[1];
        end
    end
end


always @(posedge clk) begin: TOP_CR0_CR_LOGIC3
    if (rst == 1) begin
        cr0_IE2 <= 0;
        cr0_IE3 <= 0;
        cr0_IE1 <= 0;
        cr0_IE0 <= 0;
    end
    else begin
        if (((selector == 3'b001) && cr_write)) begin
            cr0_IE0 <= r6_r7_data[0];
            cr0_IE1 <= r6_r7_data[1];
            cr0_IE2 <= r6_r7_data[2];
            cr0_IE3 <= r6_r7_data[3];
        end
    end
end


always @(posedge clk) begin: TOP_CR0_CR_LOGIC4
    if (rst == 1) begin
        cr0_EPC <= 0;
    end
    else begin
        if (cr0_int_acc) begin
            cr0_EPC <= cr0_PC;
        end
        else if (((selector == 3'b010) && cr_write)) begin
            cr0_EPC <= r6_r7_data;
        end
    end
end


always @(posedge clk) begin: TOP_CR0_CR_LOGIC5
    if (rst == 1) begin
        cr0_CPC <= 0;
    end
    else begin
        if (((selector == 3'b011) && cr_write)) begin
            cr0_CPC <= r6_r7_data;
        end
        else if (apc) begin
            cr0_CPC <= cr0_PC;
        end
    end
end


always @(posedge clk) begin: TOP_CR0_CR_LOGIC6
    if (rst == 1) begin
        cr0_PC <= 0;
    end
    else begin
        if (cr0_int_acc) begin
            cr0_PC <= (cr0_tvec + 1);
        end
        else if (ret) begin
            cr0_PC <= (cr0_EPC + 1);
        end
        else if (jmp) begin
            cr0_PC <= (r6_r7_data + 1);
        end
        else if (branch) begin
            cr0_PC <= ((cr0_PC + branch_offset) + 1);
        end
        else begin
            if ((((!main_state) || (!(mem_read || mem_write))) || (main_state && mem_ok))) begin
                cr0_PC <= (cr0_PC + 1);
            end
            else begin
                cr0_PC <= cr0_PC;
            end
        end
    end
end


always @(posedge clk) begin: TOP_CR0_CR_LOGIC7
    if (rst == 1) begin
        cr0_TVEC0 <= 0;
        cr0_TVEC1 <= 0;
        cr0_TVEC2 <= 0;
        cr0_TVEC3 <= 0;
    end
    else begin
        if (((selector == 3'b100) && cr_write)) begin
            cr0_TVEC0 <= r6_r7_data;
        end
        if (((selector == 3'b101) && cr_write)) begin
            cr0_TVEC1 <= r6_r7_data;
        end
        if (((selector == 3'b110) && cr_write)) begin
            cr0_TVEC2 <= r6_r7_data;
        end
        if (((selector == 3'b111) && cr_write)) begin
            cr0_TVEC3 <= r6_r7_data;
        end
    end
end



assign cr0_int0_acc = ((cr0_GIE & int0) & cr0_IE0);
assign cr0_int1_acc = ((cr0_GIE & int1) & cr0_IE1);
assign cr0_int2_acc = ((cr0_GIE & int2) & cr0_IE2);
assign cr0_int3_acc = ((cr0_GIE & int3) & cr0_IE3);



assign cr0_int_acc = (!(((((bra | jmp) | ret) | mem_read) | mem_write) & (((cr0_int0_acc | cr0_int1_acc) | cr0_int2_acc) | cr0_int3_acc)));



assign alu0_shift_right_signed_temp = (ds1_data >>> ds2_data);
assign alu0_shift_left = (ds1_data << ds2_data);
assign alu0_shift_num = 0;


always @(alu0_shift_right_signed_temp, ds1_data, alu_signal, alu0_shift_num) begin: TOP_ALU0_SHIFT_RIGHT_LOGIC
    if ((alu_signal == 4'b0101)) begin
        if (ds1_data[7]) begin
            alu0_shift_right_signed = (alu0_shift_right_signed_temp | alu0_shift_num);
        end
        else begin
            alu0_shift_right_signed = alu0_shift_right_signed_temp;
        end
    end
    else begin
        alu0_shift_right_unsigned = alu0_shift_right_signed_temp;
    end
end



assign branch = (bra & ds1_data[0]);


always @(alu0_shift_right_signed, alu_signal, imm, ds1_data, alu0_shift_right_unsigned, alu0_shift_left, ds2_data) begin: TOP_ALU0_ALU_LOGIC
    case (alu_signal)
        4'b0000: begin
            alu_out = (ds1_data + ds2_data);
        end
        4'b0001: begin
            alu_out = (ds1_data - ds2_data);
        end
        4'b0010: begin
            alu_out = (ds1_data & ds2_data);
        end
        4'b0011: begin
            alu_out = (ds1_data & ds2_data);
        end
        4'b0100: begin
            alu_out = (ds1_data ^ ds2_data);
        end
        4'b0101: begin
            alu_out = alu0_shift_right_signed;
        end
        4'b0110: begin
            alu_out = alu0_shift_left;
        end
        4'b0111: begin
            alu_out = alu0_shift_right_unsigned;
        end
        4'b1000: begin
            if ((((ds1_data < ds2_data) && (ds1_data[7] == 0) && (ds2_data[7] == 0)) || ((ds1_data[7-1:0] > ds2_data[7-1:0]) && (ds1_data[7] == 1) && (ds1_data[7] == 1)) || ((ds1_data[7] == 1) && (ds2_data[7] == 0)))) begin
                alu_out = 1;
            end
            else begin
                alu_out = 0;
            end
        end
        4'b1001: begin
            if ((ds1_data < ds2_data)) begin
                alu_out = 1;
            end
            else begin
                alu_out = 0;
            end
        end
        4'b1010: begin
            if ((ds1_data == ds2_data)) begin
                alu_out = 1;
            end
            else begin
                alu_out = 0;
            end
        end
        4'b1011: begin
            if ((ds1_data == ds2_data)) begin
                alu_out = 0;
            end
            else begin
                alu_out = 1;
            end
        end
        default: begin
            alu_out = imm;
        end
    endcase
end



assign write = mem_write;
assign read = mem_read;
assign mem_ok = rdy;
assign lsu_out = rdata;


always @(r6_r7_data, mem_write, ds1_data, mem_read) begin: TOP_LSU0_LOGIC_2
    if ((mem_read | mem_write)) begin
        addr = r6_r7_data;
        wdata = ds1_data;
    end
    else begin
        addr = 0;
        wdata = 0;
    end
end


always @(posedge clk) begin: TOP_GPR0_R0_R1_LOGIC
    if (rst == 1) begin
        gpr0_r5 <= 0;
        gpr0_r6 <= 0;
        gpr0_r7 <= 0;
        gpr0_r4 <= 0;
        gpr0_r0 <= 0;
        gpr0_r2 <= 0;
        gpr0_r1 <= 0;
        gpr0_r3 <= 0;
    end
    else begin
        if (register_write[0]) begin
            if (rd_r0_mux) begin
                gpr0_r0 <= cr_data[8-1:0];
            end
            else begin
                gpr0_r0 <= rd_data;
            end
        end
        if (register_write[1]) begin
            if (rd_r1_mux) begin
                gpr0_r1 <= cr_data[16-1:8];
            end
            else begin
                gpr0_r1 <= rd_data;
            end
        end
        if (register_write[2]) begin
            gpr0_r2 <= rd_data;
        end
        if (register_write[3]) begin
            gpr0_r3 <= rd_data;
        end
        if (register_write[4]) begin
            gpr0_r4 <= rd_data;
        end
        if (register_write[5]) begin
            gpr0_r5 <= rd_data;
        end
        if (register_write[6]) begin
            gpr0_r6 <= rd_data;
        end
        if (register_write[7]) begin
            gpr0_r7 <= rd_data;
        end
    end
end


always @(gpr0_r5, gpr0_r6, gpr0_r7, ds1_rx, gpr0_r4, gpr0_r0, gpr0_r2, gpr0_r1, gpr0_r3) begin: TOP_GPR0_DS1_DAT_LOGIC
    case (ds1_rx)
        3'b000: begin
            ds1_data = gpr0_r0;
        end
        3'b001: begin
            ds1_data = gpr0_r1;
        end
        3'b010: begin
            ds1_data = gpr0_r2;
        end
        3'b011: begin
            ds1_data = gpr0_r3;
        end
        3'b100: begin
            ds1_data = gpr0_r4;
        end
        3'b101: begin
            ds1_data = gpr0_r5;
        end
        3'b110: begin
            ds1_data = gpr0_r6;
        end
        3'b111: begin
            ds1_data = gpr0_r7;
        end
        default: begin
            ds1_data = 0;
        end
    endcase
end


always @(gpr0_r5, gpr0_r6, ds2_rx, gpr0_r7, gpr0_r4, gpr0_r0, gpr0_r2, gpr0_r1, gpr0_r3) begin: TOP_GPR0_DS2_DATA_LOGIC
    case (ds2_rx)
        3'b000: begin
            ds2_data = gpr0_r0;
        end
        3'b001: begin
            ds2_data = gpr0_r1;
        end
        3'b010: begin
            ds2_data = gpr0_r2;
        end
        3'b011: begin
            ds2_data = gpr0_r3;
        end
        3'b100: begin
            ds2_data = gpr0_r4;
        end
        3'b101: begin
            ds2_data = gpr0_r5;
        end
        3'b110: begin
            ds2_data = gpr0_r6;
        end
        3'b111: begin
            ds2_data = gpr0_r7;
        end
        default: begin
            ds2_data = 0;
        end
    endcase
end



assign r6_r7_data[16-1:8] = gpr0_r7;
assign r6_r7_data[8-1:0] = gpr0_r6;

endmodule
