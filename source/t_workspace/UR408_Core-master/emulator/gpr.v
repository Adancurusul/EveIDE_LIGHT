// File: gpr.v
// Generated by MyHDL 0.11
// Date: Fri Jun 26 22:17:45 2020


`timescale 1ns/10ps

module gpr (
    clk,
    rst,
    register_write,
    rd_r0_mux,
    rd_r1_mux,
    ds1_rx,
    ds2_rx,
    rd_data,
    cr_data,
    ds1_data,
    ds2_data,
    r6_r7_data
);
// 

input clk;
input rst;
input [7:0] register_write;
input rd_r0_mux;
input rd_r1_mux;
input [2:0] ds1_rx;
input [2:0] ds2_rx;
input [7:0] rd_data;
input [15:0] cr_data;
output [7:0] ds1_data;
reg [7:0] ds1_data;
output [7:0] ds2_data;
reg [7:0] ds2_data;
output [15:0] r6_r7_data;
wire [15:0] r6_r7_data;

reg [7:0] r0;
reg [7:0] r1;
reg [7:0] r2;
reg [7:0] r3;
reg [7:0] r4;
reg [7:0] r5;
reg [7:0] r6;
reg [7:0] r7;



always @(posedge clk) begin: GPR_R0_R1_LOGIC
    if (rst == 1) begin
        r2 <= 0;
        r5 <= 0;
        r3 <= 0;
        r1 <= 0;
        r0 <= 0;
        r6 <= 0;
        r7 <= 0;
        r4 <= 0;
    end
    else begin
        if (register_write[0]) begin
            if (rd_r0_mux) begin
                r0 <= cr_data[8-1:0];
            end
            else begin
                r0 <= rd_data;
            end
        end
        if (register_write[1]) begin
            if (rd_r1_mux) begin
                r1 <= cr_data[16-1:8];
            end
            else begin
                r1 <= rd_data;
            end
        end
        if (register_write[2]) begin
            r2 <= rd_data;
        end
        if (register_write[3]) begin
            r3 <= rd_data;
        end
        if (register_write[4]) begin
            r4 <= rd_data;
        end
        if (register_write[5]) begin
            r5 <= rd_data;
        end
        if (register_write[6]) begin
            r6 <= rd_data;
        end
        if (register_write[7]) begin
            r7 <= rd_data;
        end
    end
end


always @(r2, r5, r3, r1, r0, r6, r7, r4, ds1_rx) begin: GPR_DS1_DAT_LOGIC
    case (ds1_rx)
        3'b000: begin
            ds1_data = r0;
        end
        3'b001: begin
            ds1_data = r1;
        end
        3'b010: begin
            ds1_data = r2;
        end
        3'b011: begin
            ds1_data = r3;
        end
        3'b100: begin
            ds1_data = r4;
        end
        3'b101: begin
            ds1_data = r5;
        end
        3'b110: begin
            ds1_data = r6;
        end
        3'b111: begin
            ds1_data = r7;
        end
        default: begin
            ds1_data = 0;
        end
    endcase
end


always @(ds2_rx, r2, r5, r3, r1, r0, r6, r7, r4) begin: GPR_DS2_DATA_LOGIC
    case (ds2_rx)
        3'b000: begin
            ds2_data = r0;
        end
        3'b001: begin
            ds2_data = r1;
        end
        3'b010: begin
            ds2_data = r2;
        end
        3'b011: begin
            ds2_data = r3;
        end
        3'b100: begin
            ds2_data = r4;
        end
        3'b101: begin
            ds2_data = r5;
        end
        3'b110: begin
            ds2_data = r6;
        end
        3'b111: begin
            ds2_data = r7;
        end
        default: begin
            ds2_data = 0;
        end
    endcase
end



assign r6_r7_data[16-1:8] = r7;
assign r6_r7_data[8-1:0] = r6;

endmodule
